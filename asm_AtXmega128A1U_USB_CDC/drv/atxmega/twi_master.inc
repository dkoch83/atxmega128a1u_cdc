;/*
; * twi_master.inc
; *
; *  Created: 20.03.2015 19:09:33
; *   Author: Dominik
; */ 

;.SET TWIC_MASTER_ENABLE = 1
;.SET TWID_MASTER_ENABLE = 1
;.SET TWIE_MASTER_ENABLE = 1
;.SET TWIF_MASTER_ENABLE = 1

.IFNDEF TWIC_BASE
	.EQU TWIC_BASE = 0x0480
.ENDIF

.IFNDEF TWID_BASE
	.EQU TWID_BASE = 0x0490
.ENDIF

.IFNDEF TWIE_BASE
	.EQU TWIE_BASE = 0x04A0
.ENDIF

.IFNDEF TWIF_BASE
	.EQU TWIF_BASE = 0x04B0
.ENDIF

.IFNDEF PORTC_BASE
	.EQU PORTC_BASE = 0x0640
.ENDIF

.IFNDEF PORTD_BASE
	.EQU PORTD_BASE = 0x0660
.ENDIF

.IFNDEF PORTE_BASE
	.EQU PORTE_BASE = 0x0680
.ENDIF

.IFNDEF PORTF_BASE
	.EQU PORTF_BASE = 0x06A0
.ENDIF

.IFNDEF F_MCU
	.ERROR "F_MCU not SET"
.ENDIF

.ifndef twi_include
.set twi_include = 1

.EQU TWI_MASTER = 0x01
.EQU TWI_SLAVE = 0x08

	.SET TWI_BAUT_100 = (F_MCU / (2*(5+100000)))+1
	.SET TWI_BAUT_400 = (F_MCU / (2*(5+400000)))+1

	.IFNDEF TWIC_MASTER_ENABLE
		.SET TWIC_MASTER_ENABLE = 0
	.ENDIF

	.IFNDEF TWID_MASTER_ENABLE
		.SET TWID_MASTER_ENABLE = 0
	.ENDIF

	.IFNDEF TWIE_MASTER_ENABLE
		.SET TWIE_MASTER_ENABLE = 0
	.ENDIF

	.IFNDEF TWIF_MASTER_ENABLE
		.SET TWIF_MASTER_ENABLE = 0
	.ENDIF
;######################################################################
;								TWI C
;######################################################################
	.IF TWIC_MASTER_ENABLE == 1
		.MACRO TWIC_MASTER_INIT ; TWI_BAUT_*
			; DISABLE TWI MASTER
			LDI R24, 0b00000000
			STS TWIC_BASE+TWI_MASTER+0x00, R24
			; RESET TWI
			CALL TWIC_MASTER_RESET
			; SET BAUT
			LDI R24, @0
			STS TWIC_BASE+TWI_MASTER+0x04, R24
			; ENABLE TWI MASTER
			LDI R24, 0b00001000
			STS TWIC_BASE+TWI_MASTER+0x00, R24
			; SET IDLE STATE
			LDI R24, 0x01
			STS TWIC_BASE+TWI_MASTER+0x03, R24
			; Stop
			LDI R24, 0x03
			STS TWIC_BASE+TWI_MASTER+0x02, R24
		.ENDMACRO
		
		.MACRO TWIC_MASTER_ADDR_W ; Register
			CBR @0, 0x01
			STS TWIC_BASE+TWI_MASTER+0x05, @0
		.ENDMACRO

		.MACRO TWIC_MASTER_ADDR_R ; Register
			SBR  @0, 0x01
			STS TWIC_BASE+TWI_MASTER+0x05, @0
		.ENDMACRO

		.MACRO TWIC_MASTER_DATA_IN ; Register
			STS TWIC_BASE+TWI_MASTER+0x06, @0
		.ENDMACRO

		.MACRO TWIC_MASTER_DATA_OUT ; Register
			LDS @0, TWIC_BASE+TWI_MASTER+0x06
		.ENDMACRO

		.MACRO TWIC_MASTER_START
			LDI R24, 0x01
			STS TWIC_BASE+TWI_MASTER+0x02, R24
		.ENDMACRO

		.MACRO TWIC_MASTER_NOACK
			LDI R24, (1<<2)
			STS TWIC_BASE+TWI_MASTER+0x02, R24
		.ENDMACRO

		.MACRO TWIC_MASTER_ACK
			LDI R24, 0x02
			STS TWIC_BASE+TWI_MASTER+0x02, R24
		.ENDMACRO

		.MACRO TWIC_MASTER_STOP
			LDS R24, TWIC_BASE+TWI_MASTER+0x02
			SBR R24, 0x03
			STS TWIC_BASE+TWI_MASTER+0x02, R24

			TWIC_MASTER_STOP_WAIT_IDLE:
			LDS R24, TWIC_BASE+TWI_MASTER+0x03
			ANDI R24, 3
			CPI R24, 0b01
			BRNE TWIC_MASTER_STOP_WAIT_IDLE
		.ENDMACRO
		
		TWIC_MASTER_CHECK_ACK: ; Return R0 = True/False
		PUSH R24	
			CLR R0
			LDS R24, TWIC_BASE+TWI_MASTER+0x03
			ANDI R24, (1<<4)
			CPI R24, 0
			BREQ TWIC_MASTER_CHECK_ACK_EXIT
			TWIC_MASTER_CHECK_NACK:
				INC R0
			TWIC_MASTER_CHECK_ACK_EXIT:
		POP R24
		RET

		TWIC_MASTER_RESET:
		PUSH R16
		PUSH R17
		PUSH R18
		PUSH R19
		PUSH R20
			LDS R16, PORTE_BASE

			LDI R17, (1<<0)
			STS PORTE_BASE+TWI_MASTER+0x01, R17
			STS PORTE_BASE+TWI_MASTER+0x05, R17
			
			LDI R17, (1<<1)
			STS PORTE_BASE+TWI_MASTER+0x00, R17
			STS PORTE_BASE+TWI_MASTER+0x05, R17

			LDI R19, 0x00
			TWIC_MASTER_RESET_LOOP:
				STS PORTE_BASE+TWI_MASTER+0x06, R17
				LDS R18, PORTE_BASE+TWI_MASTER+0x07
					LDI R20, 255
					TWIC_MASTER_RESET_DELAY:
						DEC R20
					BRNE TWIC_MASTER_RESET_DELAY
					
					SBRS R18, 0
					CLR R19

					SBRC R18, 0
					INC R19
				STS PORTE_BASE+TWI_MASTER+0x06, R17
				CPI R19, 9
			BRNE TWIC_MASTER_RESET_LOOP
			STS PORTE_BASE, R16
		POP R20
		POP R19
		POP R18
		POP R17
		POP R16
		RET

		TWIC_MASTER_WAIT_W:
		PUSH R24
			CLR R0
			INC R0
			TWIC_MASTER_WAIT_WRITE_LOOP:
				LDS R24, TWIC_BASE+TWI_MASTER+0x03
				SBRS R24, 6
			RJMP TWIC_MASTER_WAIT_WRITE_LOOP

			LDS R24, TWIC_BASE+TWI_MASTER+0x03
			SBRC R24, 3
			RJMP TWIC_MASTER_WAIT_W_ERROR

			LDS R24, TWIC_BASE+TWI_MASTER+0x03
			SBRC R24, 2
			RJMP TWIC_MASTER_WAIT_W_ERROR

			LDS R24, TWIC_BASE+TWI_MASTER+0x03
			CBR R24, 0b11111100
			CPI R24, 3
			BRNE TWIC_MASTER_WAIT_W_EXIT

			RJMP TWIC_MASTER_WAIT_W_EXIT
			TWIC_MASTER_WAIT_W_ERROR:
				CLR R0
				; TWI STOP
				LDI R24, 0x03
				STS TWIC_BASE+TWI_MASTER+0x02, R24
				; SET IDLE STATE
				LDI R24, 0x01
				STS TWIC_BASE+TWI_MASTER+0x03, R24
			TWIC_MASTER_WAIT_W_EXIT:
		POP R24
		RET

		TWIC_MASTER_WAIT_R:
		PUSH R24
			TWIC_MASTER_WAIT_READ_LOOP:
				LDS R24, TWIC_BASE+TWI_MASTER+0x03
				SBRS R24, 7
			RJMP TWIC_MASTER_WAIT_READ_LOOP
		POP R24
		RET
	.ENDIF
;######################################################################
;								TWI D
;######################################################################
	.IF TWID_MASTER_ENABLE == 1
		.MACRO TWID_MASTER_INIT ; TWI_BAUT_*
			; DISABLE TWI MASTER
			LDI R24, 0b00000000
			STS TWID_BASE+TWI_MASTER+0x00, R24
			; RESET TWI
			CALL TWID_MASTER_RESET
			; SET BAUT
			LDI R24, @0
			STS TWID_BASE+TWI_MASTER+0x04, R24
			; ENABLE TWI MASTER
			LDI R24, 0b00001000
			STS TWID_BASE+TWI_MASTER+0x00, R24
			; SET IDLE STATE
			LDI R24, 0x01
			STS TWID_BASE+TWI_MASTER+0x03, R24
			; Stop
			LDI R24, 0x03
			STS TWID_BASE+TWI_MASTER+0x02, R24
		.ENDMACRO
		
		.MACRO TWID_MASTER_ADDR_W ; Register
			CBR @0, 0x01
			STS TWID_BASE+TWI_MASTER+0x05, @0
		.ENDMACRO

		.MACRO TWID_MASTER_ADDR_R ; Register
			SBR  @0, 0x01
			STS TWID_BASE+TWI_MASTER+0x05, @0
		.ENDMACRO

		.MACRO TWID_MASTER_DATA_IN ; Register
			STS TWID_BASE+TWI_MASTER+0x06, @0
		.ENDMACRO

		.MACRO TWID_MASTER_DATA_OUT ; Register
			LDS @0, TWID_BASE+TWI_MASTER+0x06
		.ENDMACRO

		.MACRO TWID_MASTER_START
			LDI R24, 0x01
			STS TWID_BASE+TWI_MASTER+0x02, R24
		.ENDMACRO

		.MACRO TWID_MASTER_NOACK
			LDI R24, (1<<2)
			STS TWID_BASE+TWI_MASTER+0x02, R24
		.ENDMACRO

		.MACRO TWID_MASTER_ACK
			LDI R24, 0x02
			STS TWID_BASE+TWI_MASTER+0x02, R24
		.ENDMACRO

		.MACRO TWID_MASTER_STOP
			LDS R24, TWID_BASE+TWI_MASTER+0x02
			SBR R24, 0x03
			STS TWID_BASE+TWI_MASTER+0x02, R24

			TWID_MASTER_STOP_WAIT_IDLE:
			LDS R24, TWID_BASE+TWI_MASTER+0x03
			ANDI R24, 3
			CPI R24, 0b01
			BRNE TWID_MASTER_STOP_WAIT_IDLE
		.ENDMACRO
		
		TWID_MASTER_CHECK_ACK: ; Return R0 = True/False
		PUSH R24	
			CLR R0
			LDS R24, TWID_BASE+TWI_MASTER+0x03
			ANDI R24, (1<<4)
			CPI R24, 0
			BREQ TWID_MASTER_CHECK_ACK_EXIT
			TWID_MASTER_CHECK_NACK:
				INC R0
			TWID_MASTER_CHECK_ACK_EXIT:
		POP R24
		RET

		TWID_MASTER_RESET:
		PUSH R16
		PUSH R17
		PUSH R18
		PUSH R19
		PUSH R20
			LDS R16, PORTE_BASE

			LDI R17, (1<<0)
			STS PORTE_BASE+TWI_MASTER+0x01, R17
			STS PORTE_BASE+TWI_MASTER+0x05, R17
			
			LDI R17, (1<<1)
			STS PORTE_BASE+TWI_MASTER+0x00, R17
			STS PORTE_BASE+TWI_MASTER+0x05, R17

			LDI R19, 0x00
			TWID_MASTER_RESET_LOOP:
				STS PORTE_BASE+TWI_MASTER+0x06, R17
				LDS R18, PORTE_BASE+TWI_MASTER+0x07
					LDI R20, 255
					TWID_MASTER_RESET_DELAY:
						DEC R20
					BRNE TWID_MASTER_RESET_DELAY
					
					SBRS R18, 0
					CLR R19

					SBRC R18, 0
					INC R19
				STS PORTE_BASE+TWI_MASTER+0x06, R17
				CPI R19, 9
			BRNE TWID_MASTER_RESET_LOOP
			STS PORTE_BASE, R16
		POP R20
		POP R19
		POP R18
		POP R17
		POP R16
		RET

		TWID_MASTER_WAIT_W:
		PUSH R24
			CLR R0
			INC R0
			TWID_MASTER_WAIT_WRITE_LOOP:
				LDS R24, TWID_BASE+TWI_MASTER+0x03
				SBRS R24, 6
			RJMP TWID_MASTER_WAIT_WRITE_LOOP

			LDS R24, TWID_BASE+TWI_MASTER+0x03
			SBRC R24, 3
			RJMP TWID_MASTER_WAIT_W_ERROR

			LDS R24, TWID_BASE+TWI_MASTER+0x03
			SBRC R24, 2
			RJMP TWID_MASTER_WAIT_W_ERROR

			LDS R24, TWID_BASE+TWI_MASTER+0x03
			CBR R24, 0b11111100
			CPI R24, 3
			BRNE TWID_MASTER_WAIT_W_EXIT

			RJMP TWID_MASTER_WAIT_W_EXIT
			TWID_MASTER_WAIT_W_ERROR:
				CLR R0
				; TWI STOP
				LDI R24, 0x03
				STS TWID_BASE+TWI_MASTER+0x02, R24
				; SET IDLE STATE
				LDI R24, 0x01
				STS TWID_BASE+TWI_MASTER+0x03, R24
			TWID_MASTER_WAIT_W_EXIT:
		POP R24
		RET

		TWID_MASTER_WAIT_R:
		PUSH R24
			TWID_MASTER_WAIT_READ_LOOP:
				LDS R24, TWID_BASE+TWI_MASTER+0x03
				SBRS R24, 7
			RJMP TWID_MASTER_WAIT_READ_LOOP
		POP R24
		RET
	.ENDIF

;######################################################################
;								TWI E
;######################################################################
	.IF TWIE_MASTER_ENABLE == 1
		.MACRO TWIE_MASTER_INIT ; TWI_BAUT_*
			; DISABLE TWI MASTER
			LDI R24, 0b00000000
			STS TWIE_BASE+TWI_MASTER+0x00, R24
			; RESET TWI
			CALL TWIE_MASTER_RESET
			; SET BAUT
			LDI R24, @0
			STS TWIE_BASE+TWI_MASTER+0x04, R24
			; ENABLE TWI MASTER
			LDI R24, 0b00001000
			STS TWIE_BASE+TWI_MASTER+0x00, R24
			; SET IDLE STATE
			LDI R24, 0x01
			STS TWIE_BASE+TWI_MASTER+0x03, R24
			; Stop
			LDI R24, 0x03
			STS TWIE_BASE+TWI_MASTER+0x02, R24
		.ENDMACRO
		
		.MACRO TWIE_MASTER_ADDR_W ; Register
			CBR @0, 0x01
			STS TWIE_BASE+TWI_MASTER+0x05, @0
		.ENDMACRO

		.MACRO TWIE_MASTER_ADDR_R ; Register
			SBR  @0, 0x01
			STS TWIE_BASE+TWI_MASTER+0x05, @0
		.ENDMACRO

		.MACRO TWIE_MASTER_DATA_IN ; Register
			STS TWIE_BASE+TWI_MASTER+0x06, @0
		.ENDMACRO

		.MACRO TWIE_MASTER_DATA_OUT ; Register
			LDS @0, TWIE_BASE+TWI_MASTER+0x06
		.ENDMACRO

		.MACRO TWIE_MASTER_START
			LDI R24, 0x01
			STS TWIE_BASE+TWI_MASTER+0x02, R24
		.ENDMACRO

		.MACRO TWIE_MASTER_NOACK
			LDI R24, (1<<2)
			STS TWIE_BASE+TWI_MASTER+0x02, R24
		.ENDMACRO

		.MACRO TWIE_MASTER_ACK
			LDI R24, 0x02
			STS TWIE_BASE+TWI_MASTER+0x02, R24
		.ENDMACRO

		.MACRO TWIE_MASTER_STOP
			LDS R24, TWIE_BASE+TWI_MASTER+0x02
			SBR R24, 0x03
			STS TWIE_BASE+TWI_MASTER+0x02, R24

			TWIE_MASTER_STOP_WAIT_IDLE:
			LDS R24, TWIE_BASE+TWI_MASTER+0x03
			ANDI R24, 3
			CPI R24, 0b01
			BRNE TWIE_MASTER_STOP_WAIT_IDLE
		.ENDMACRO
		
		TWIE_MASTER_CHECK_ACK: ; Return R0 = True/False
		PUSH R24	
			CLR R0
			LDS R24, TWIE_BASE+TWI_MASTER+0x03
			ANDI R24, (1<<4)
			CPI R24, 0
			BREQ TWIE_MASTER_CHECK_ACK_EXIT
			TWIE_MASTER_CHECK_NACK:
				INC R0
			TWIE_MASTER_CHECK_ACK_EXIT:
		POP R24
		RET

		TWIE_MASTER_RESET:
		PUSH R16
		PUSH R17
		PUSH R18
		PUSH R19
		PUSH R20
			LDS R16, PORTE_BASE

			LDI R17, (1<<0)
			STS PORTE_BASE+TWI_MASTER+0x01, R17
			STS PORTE_BASE+TWI_MASTER+0x05, R17
			
			LDI R17, (1<<1)
			STS PORTE_BASE+TWI_MASTER+0x00, R17
			STS PORTE_BASE+TWI_MASTER+0x05, R17

			LDI R19, 0x00
			TWIE_MASTER_RESET_LOOP:
				STS PORTE_BASE+TWI_MASTER+0x06, R17
				LDS R18, PORTE_BASE+TWI_MASTER+0x07
					LDI R20, 255
					TWIE_MASTER_RESET_DELAY:
						DEC R20
					BRNE TWIE_MASTER_RESET_DELAY
					
					SBRS R18, 0
					CLR R19

					SBRC R18, 0
					INC R19
				STS PORTE_BASE+TWI_MASTER+0x06, R17
				CPI R19, 9
			BRNE TWIE_MASTER_RESET_LOOP
			STS PORTE_BASE, R16
		POP R20
		POP R19
		POP R18
		POP R17
		POP R16
		RET

		TWIE_MASTER_WAIT_W:
		PUSH R24
			CLR R0
			INC R0
			TWIE_MASTER_WAIT_WRITE_LOOP:
				LDS R24, TWIE_BASE+TWI_MASTER+0x03
				SBRS R24, 6
			RJMP TWIE_MASTER_WAIT_WRITE_LOOP

			LDS R24, TWIE_BASE+TWI_MASTER+0x03
			SBRC R24, 3
			RJMP TWIE_MASTER_WAIT_W_ERROR

			LDS R24, TWIE_BASE+TWI_MASTER+0x03
			SBRC R24, 2
			RJMP TWIE_MASTER_WAIT_W_ERROR

			LDS R24, TWIE_BASE+TWI_MASTER+0x03
			CBR R24, 0b11111100
			CPI R24, 3
			BRNE TWIE_MASTER_WAIT_W_EXIT

			RJMP TWIE_MASTER_WAIT_W_EXIT
			TWIE_MASTER_WAIT_W_ERROR:
				CLR R0
				; TWI STOP
				LDI R24, 0x03
				STS TWIE_BASE+TWI_MASTER+0x02, R24
				; SET IDLE STATE
				LDI R24, 0x01
				STS TWIE_BASE+TWI_MASTER+0x03, R24
			TWIE_MASTER_WAIT_W_EXIT:
		POP R24
		RET

		TWIE_MASTER_WAIT_R:
		PUSH R24
			TWIE_MASTER_WAIT_READ_LOOP:
				LDS R24, TWIE_BASE+TWI_MASTER+0x03
				SBRS R24, 7
			RJMP TWIE_MASTER_WAIT_READ_LOOP
		POP R24
		RET
	.ENDIF

;######################################################################
;								TWI F
;######################################################################
	.IF TWIF_MASTER_ENABLE == 1
		.MACRO TWIF_MASTER_INIT ; TWI_BAUT_*
			; DISABLE TWI MASTER
			LDI R24, 0b00000000
			STS TWIF_BASE+TWI_MASTER+0x00, R24
			; RESET TWI
			CALL TWIF_MASTER_RESET
			; SET BAUT
			LDI R24, @0
			STS TWIF_BASE+TWI_MASTER+0x04, R24
			; ENABLE TWI MASTER
			LDI R24, 0b00001000
			STS TWIF_BASE+TWI_MASTER+0x00, R24
			; SET IDLE STATE
			LDI R24, 0x01
			STS TWIF_BASE+TWI_MASTER+0x03, R24
			; Stop
			LDI R24, 0x03
			STS TWIF_BASE+TWI_MASTER+0x02, R24
		.ENDMACRO
		
		.MACRO TWIF_MASTER_ADDR_W ; Register
			CBR @0, 0x01
			STS TWIF_BASE+TWI_MASTER+0x05, @0
		.ENDMACRO

		.MACRO TWIF_MASTER_ADDR_R ; Register
			SBR  @0, 0x01
			STS TWIF_BASE+TWI_MASTER+0x05, @0
		.ENDMACRO

		.MACRO TWIF_MASTER_DATA_IN ; Register
			STS TWIF_BASE+TWI_MASTER+0x06, @0
		.ENDMACRO

		.MACRO TWIF_MASTER_DATA_OUT ; Register
			LDS @0, TWIF_BASE+TWI_MASTER+0x06
		.ENDMACRO

		.MACRO TWIF_MASTER_START
			LDI R24, 0x01
			STS TWIF_BASE+TWI_MASTER+0x02, R24
		.ENDMACRO

		.MACRO TWIF_MASTER_NOACK
			LDI R24, (1<<2)
			STS TWIF_BASE+TWI_MASTER+0x02, R24
		.ENDMACRO

		.MACRO TWIF_MASTER_ACK
			LDI R24, 0x02
			STS TWIF_BASE+TWI_MASTER+0x02, R24
		.ENDMACRO

		.MACRO TWIF_MASTER_STOP
			LDS R24, TWIF_BASE+TWI_MASTER+0x02
			SBR R24, 0x03
			STS TWIF_BASE+TWI_MASTER+0x02, R24

			TWIF_MASTER_STOP_WAIT_IDLE:
			LDS R24, TWIF_BASE+TWI_MASTER+0x03
			ANDI R24, 3
			CPI R24, 0b01
			BRNE TWIF_MASTER_STOP_WAIT_IDLE
		.ENDMACRO
		
		TWIF_MASTER_CHECK_ACK: ; Return R0 = True/False
		PUSH R24	
			CLR R0
			LDS R24, TWIF_BASE+TWI_MASTER+0x03
			ANDI R24, (1<<4)
			CPI R24, 0
			BREQ TWIF_MASTER_CHECK_ACK_EXIT
			TWIF_MASTER_CHECK_NACK:
				INC R0
			TWIF_MASTER_CHECK_ACK_EXIT:
		POP R24
		RET

		TWIF_MASTER_RESET:
		PUSH R16
		PUSH R17
		PUSH R18
		PUSH R19
		PUSH R20
			LDS R16, PORTE_BASE

			LDI R17, (1<<0)
			STS PORTE_BASE+TWI_MASTER+0x01, R17
			STS PORTE_BASE+TWI_MASTER+0x05, R17
			
			LDI R17, (1<<1)
			STS PORTE_BASE+TWI_MASTER+0x00, R17
			STS PORTE_BASE+TWI_MASTER+0x05, R17

			LDI R19, 0x00
			TWIF_MASTER_RESET_LOOP:
				STS PORTE_BASE+TWI_MASTER+0x06, R17
				LDS R18, PORTE_BASE+TWI_MASTER+0x07
					LDI R20, 255
					TWIF_MASTER_RESET_DELAY:
						DEC R20
					BRNE TWIF_MASTER_RESET_DELAY
					
					SBRS R18, 0
					CLR R19

					SBRC R18, 0
					INC R19
				STS PORTE_BASE+TWI_MASTER+0x06, R17
				CPI R19, 9
			BRNE TWIF_MASTER_RESET_LOOP
			STS PORTE_BASE, R16
		POP R20
		POP R19
		POP R18
		POP R17
		POP R16
		RET

		TWIF_MASTER_WAIT_W:
		PUSH R24
			CLR R0
			INC R0
			TWIF_MASTER_WAIT_WRITE_LOOP:
				LDS R24, TWIF_BASE+TWI_MASTER+0x03
				SBRS R24, 6
			RJMP TWIF_MASTER_WAIT_WRITE_LOOP

			LDS R24, TWIF_BASE+TWI_MASTER+0x03
			SBRC R24, 3
			RJMP TWIF_MASTER_WAIT_W_ERROR

			LDS R24, TWIF_BASE+TWI_MASTER+0x03
			SBRC R24, 2
			RJMP TWIF_MASTER_WAIT_W_ERROR

			LDS R24, TWIF_BASE+TWI_MASTER+0x03
			CBR R24, 0b11111100
			CPI R24, 3
			BRNE TWIF_MASTER_WAIT_W_EXIT

			RJMP TWIF_MASTER_WAIT_W_EXIT
			TWIF_MASTER_WAIT_W_ERROR:
				CLR R0
				; TWI STOP
				LDI R24, 0x03
				STS TWIF_BASE+TWI_MASTER+0x02, R24
				; SET IDLE STATE
				LDI R24, 0x01
				STS TWIF_BASE+TWI_MASTER+0x03, R24
			TWIF_MASTER_WAIT_W_EXIT:
		POP R24
		RET

		TWIF_MASTER_WAIT_R:
		PUSH R24
			TWIF_MASTER_WAIT_READ_LOOP:
				LDS R24, TWIF_BASE+TWI_MASTER+0x03
				SBRS R24, 7
			RJMP TWIF_MASTER_WAIT_READ_LOOP
		POP R24
		RET
	.ENDIF
.ENDIF